
// #pragma
#pragma kernel ClearTexture    Texture3DAtlas=ClearTexture    CLEAR
#pragma kernel CopySimulation  Texture3DAtlas=CopySimulation  COPY_SIMULATION
#pragma kernel CopyAnimDensity Texture3DAtlas=CopyAnimDensity COPY_ANIM_DENSITY
#pragma kernel CopyVShadowMap  Texture3DAtlas=CopyVShadowMap  COPY_VSHADOWMAP

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"

#define TILE_SIZE 4

CBUFFER_START(_FluidSimVolume)
float _FrameBlend;
CBUFFER_END

#ifdef COPY_SIMULATION
Texture3D<float4> _SimulationBuffer0;
Texture3D<float4> _SimulationBuffer1;
#elif COPY_ANIM_DENSITY
Texture3D<float4> _AnimDensityTexture0;
Texture3D<float4> _AnimDensityTexture1;
#elif COPY_VSHADOWMAP
Texture3D<float> _VShadowMapBuffer;
#endif
RWTexture3D<float4> _OutputVolumeAtlas;

[numthreads(TILE_SIZE, TILE_SIZE, TILE_SIZE)]
void Texture3DAtlas(uint3 id : SV_DispatchThreadID)
{
#ifdef CLEAR
    _OutputVolumeAtlas[id.xyz] = float4(0.0, 0.0, 0.0, 0.0);
#elif COPY_SIMULATION
    float3 pos = _SimulationBuffer0[id.xyz].xyz;
    float3 weight = pos - floor(pos);

    uint3 output = (uint3)pos;

    _OutputVolumeAtlas[output] = _SimulationBuffer1[id.xyz];
#elif COPY_ANIM_DENSITY
    float4 density = lerp(_AnimDensityTexture0[id.xyz], _AnimDensityTexture1[id.xyz], _FrameBlend);
    _OutputVolumeAtlas[id.xyz] = density;
    //_OutputVolumeAtlas[id.xyz] = float4(density.xyz, 0.0);
#elif COPY_VSHADOWMAP
    _OutputVolumeAtlas[id.xyz] = _VShadowMapBuffer[id.xyz];
#endif
}
