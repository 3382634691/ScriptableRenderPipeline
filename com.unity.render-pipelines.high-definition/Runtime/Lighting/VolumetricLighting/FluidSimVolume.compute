
// #pragma
#pragma kernel InitialState Simulate=InitialState INITIAL_STATE
#pragma kernel Simulate     Simulate=Simulate     SIMULATE

#define TILE_SIZE 4

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"

CBUFFER_START(_FluidSimVolume)
float3 _FluidSimVolumeRes;
float _VectorFieldSpeed;
float _FrameBlend;
CBUFFER_END

#ifdef INITIAL_STATE
Texture3D<float4> _InitialStateVolumeTexture;
#elif SIMULATE
Texture3D<float4> _VectorField0;
Texture3D<float4> _VectorField1;
#endif

RWTexture3D<float4> _SimulationBuffer0;
RWTexture3D<float4> _SimulationBuffer1;

[numthreads(TILE_SIZE, TILE_SIZE, TILE_SIZE)]
void Simulate(uint3 id : SV_DispatchThreadID)
{
#ifdef INITIAL_STATE
    float3 startPos = (float3)id.xyz;
    
    _SimulationBuffer0[id.xyz] = float4(startPos, 0.0);
    _SimulationBuffer1[id.xyz] = _InitialStateVolumeTexture[id.xyz];
#elif SIMULATE
    float3 pos = _SimulationBuffer0[id.xyz].xyz;
    float3 vfUVW = (pos / _FluidSimVolumeRes);

    float3 vf0 = SAMPLE_TEXTURE3D_LOD(_VectorField0, s_linear_clamp_sampler, vfUVW, 0).rgb;
    float3 vf1 = SAMPLE_TEXTURE3D_LOD(_VectorField1, s_linear_clamp_sampler, vfUVW, 0).rgb;
    
    float3 vf = lerp(vf0, vf1, _FrameBlend);
    vf *= (unity_DeltaTime.x * _VectorFieldSpeed);
    //float3 vf = (pos / _FluidSimVolumeRes) * 2.0 - 1.0;
    //vf = float3(vf.y, -vf.x, 0.0) / vf.z;

    float3 outputPos = pos + vf;

    _SimulationBuffer0[id.xyz] = float4(outputPos, 0.0);
#endif
}
