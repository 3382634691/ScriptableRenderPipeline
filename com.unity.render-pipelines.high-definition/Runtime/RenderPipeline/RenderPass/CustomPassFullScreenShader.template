Shader "FullScreen/#SCRIPTNAME#"
{
    HLSLINCLUDE

    #pragma vertex Vert

    #pragma target 4.5
    #pragma only_renderers d3d11 ps4 xboxone vulkan metal switch
    
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/RenderPass/CustomPassCommon.hlsl"

    // The CustomPassInputs struct allow you to retrieve a lot of useful information for your fullScreenShader.
    // You can retrtieve it by calling LoadPassInputs(varyings). Here is the definition of the structure:
    // struct CustomPassInputs
    // {
    //     float2      screenSpaceUV;
    //     uint2       screenSpacePixelCoordinates;
    //     float3      viewDirection;
    //     float       rawDepth;
    //     float3      worldSpacePosition; // Can be camera-relative
    // };

    // Custom Buffer access:
    // To sample or load data from the color / depth buffer of the custom target you can use these functions:
    // float3 LoadCustomColor(uint2 pixelCoords)
    // float3 SampleCustomColor(float2 uv)
    // float SampleCustomDepth(float2 uv)
    // float LoadCustomDepth(uint2 pixelCoords)

    // There are also a lot of utility function you can use inside Common.hlsl and Color.hlsl,
    // you can check them out in the source code of the core SRP package.

    float4 FullScreenPass(Varyings varyings) : SV_Target
    {
        // Load common inputs for custom pass
        CustomPassInputs input = LoadPassInputs(varyings);
        float4 color = 1.0;

        // You can add your custom pass code here
        color = float4(input.viewDirection, 0.2);

        return color;
    }

    ENDHLSL

    SubShader
    {
        Pass
        {
            Name "Custom Pass 0"

            ZWrite Off
            ZTest Always
            Blend SrcAlpha OneMinusSrcAlpha
            Cull Off

            // Stencil disclaimer: if you want to write to the stencil buffer, your custom pass must
            // target the custom buffer, not the camera ! If you change the stencil bits of the camera
            // buffer, trhe HDRP rendering will be screwed.

            HLSLPROGRAM
                #pragma fragment FullScreenPass
            ENDHLSL
        }
    }
    Fallback Off
}
