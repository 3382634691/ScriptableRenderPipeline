// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GenerateEyeNormalMaps

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"

RWTexture2D<float3> OutputTexture;
int _MapRes;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

    const int iterations = 100;

    float finalNoise = 0.0f;
    for (int i = 0; i < 100; ++i)
    {
        uint3 seed = uint3(id.xy + (33191 * i), (i* 46351  + (id.x + id.y)));
        float2 randVals = GenerateHashedRandomFloat(seed);

        float2 currUVs = id.xy / _MapRes;

        float noiseCurrVar = sin(sqrt(pow((currUVs.x - randVals.x), 2) + pow((currUVs.y - randVals.y), 2)) + 1.0f / 2.08f + 5 * randVals.z);
        finalNoise += noiseCurrVar;
    }

    finalNoise /= iterations;

    OutputTexture[id.xy] = finalNoise;
}
