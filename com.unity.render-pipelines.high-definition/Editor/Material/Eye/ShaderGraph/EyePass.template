Pass
{
    // based on EyePass.template
    Name "$splice(PassName)"
    Tags { "LightMode" = "$splice(LightMode)" }

    //-------------------------------------------------------------------------------------
    // Render Modes (Blend, Cull, ZTest, Stencil, etc)
    //-------------------------------------------------------------------------------------
    $splice(Blending)
    $splice(Culling)
    $splice(ZTest)
    $splice(ZWrite)
    $splice(ZClip)
    $splice(Stencil)
    $splice(ColorMask)
    //-------------------------------------------------------------------------------------
    // End Render Modes
    //-------------------------------------------------------------------------------------

    HLSLPROGRAM

    #pragma target 4.5
    #pragma only_renderers d3d11 ps4 xboxone vulkan metal switch
    //#pragma enable_d3d11_debug_symbols

    #pragma multi_compile_instancing
    #pragma instancing_options renderinglayer

    #pragma multi_compile _ LOD_FADE_CROSSFADE

    #pragma shader_feature _SURFACE_TYPE_TRANSPARENT
    #pragma shader_feature_local _DOUBLESIDED_ON
    #pragma shader_feature_local _ _BLENDMODE_ALPHA _BLENDMODE_ADD _BLENDMODE_PRE_MULTIPLY

    //-------------------------------------------------------------------------------------
    // Variant Definitions (active field translations to HDRP defines)
    //-------------------------------------------------------------------------------------
    $Occlusion:                         #define _OCCLUSION 1
    $SpecularOcclusionFromAO:           #define _SPECULAR_OCCLUSION_FROM_AO 1
    $SpecularOcclusionFromAOBentNormal: #define _SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL 1
    $SpecularOcclusionCustom:           #define _SPECULAR_OCCLUSION_CUSTOM 1
    $Specular.AA:                       #define _ENABLE_GEOMETRIC_SPECULAR_AA 1
    $DisableSSR:                        #define _DISABLE_SSR 1

    //-------------------------------------------------------------------------------------
    // End Variant Definitions
    //-------------------------------------------------------------------------------------

    #pragma vertex Vert
    #pragma fragment Frag

    #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"

    #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"

    // define FragInputs structure
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"

    //-------------------------------------------------------------------------------------
    // Defines
    //-------------------------------------------------------------------------------------
    $splice(Defines)

    // this translates the new dependency tracker into the old preprocessor definitions for the existing HDRP shader code
    $AttributesMesh.normalOS:               #define ATTRIBUTES_NEED_NORMAL
    $AttributesMesh.tangentOS:              #define ATTRIBUTES_NEED_TANGENT
    $AttributesMesh.uv0:                    #define ATTRIBUTES_NEED_TEXCOORD0
    $AttributesMesh.uv1:                    #define ATTRIBUTES_NEED_TEXCOORD1
    $AttributesMesh.uv2:                    #define ATTRIBUTES_NEED_TEXCOORD2
    $AttributesMesh.uv3:                    #define ATTRIBUTES_NEED_TEXCOORD3
    $AttributesMesh.color:                  #define ATTRIBUTES_NEED_COLOR
    $VaryingsMeshToPS.positionRWS:          #define VARYINGS_NEED_POSITION_WS
    $VaryingsMeshToPS.normalWS:             #define VARYINGS_NEED_TANGENT_TO_WORLD
    $VaryingsMeshToPS.texCoord0:            #define VARYINGS_NEED_TEXCOORD0
    $VaryingsMeshToPS.texCoord1:            #define VARYINGS_NEED_TEXCOORD1
    $VaryingsMeshToPS.texCoord2:            #define VARYINGS_NEED_TEXCOORD2
    $VaryingsMeshToPS.texCoord3:            #define VARYINGS_NEED_TEXCOORD3
    $VaryingsMeshToPS.color:                #define VARYINGS_NEED_COLOR
    $VaryingsMeshToPS.cullFace:             #define VARYINGS_NEED_CULLFACE
    $features.modifyMesh:                   #define HAVE_MESH_MODIFICATION

// We need isFontFace when using double sided
#if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
    #define VARYINGS_NEED_CULLFACE
#endif

    //-------------------------------------------------------------------------------------
    // End Defines
    //-------------------------------------------------------------------------------------

    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#ifdef DEBUG_DISPLAY
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
#endif

    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"

#if (SHADERPASS == SHADERPASS_FORWARD)
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"

    #define HAS_LIGHTLOOP

    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Eye/Eye.hlsl"
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
#else
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Eye/Eye.hlsl"
#endif

    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

    //Used by SceneSelectionPass
    int _ObjectId;
    int _PassValue;

    //-------------------------------------------------------------------------------------
    // Interpolator Packing And Struct Declarations
    //-------------------------------------------------------------------------------------
    $buildType(AttributesMesh)
    $buildType(VaryingsMeshToPS)
    $buildType(VaryingsMeshToDS)
    //-------------------------------------------------------------------------------------
    // End Interpolator Packing And Struct Declarations
    //-------------------------------------------------------------------------------------
    
    //-------------------------------------------------------------------------------------
    // Graph generated code
    //-------------------------------------------------------------------------------------
    $splice(Graph)
    //-------------------------------------------------------------------------------------
    // End graph generated code
    //-------------------------------------------------------------------------------------

$features.modifyMesh:   $include("VertexAnimation.template.hlsl")

$include("SharedCode.template.hlsl")
    TEXTURE2D(_EyeTexture);
    TEXTURE2D(_EyeMask);
    int _EyeRefraction;
    SAMPLER(s_point_clamp);
    TEXTURE2D(_EyeNormal);
    
    float2 TransformToUVSpace(float3 positionOS)
    {
        return float2(-positionOS.x + 0.5, positionOS.y + 0.5);
    }
    void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
    {
        // setup defaults -- these are used if the graph doesn't output a value
        ZERO_INITIALIZE(SurfaceData, surfaceData);

        // copy across graph values, if defined
        $SurfaceDescription.SpecularOcclusion:          surfaceData.specularOcclusion =         surfaceDescription.SpecularOcclusion;
        $SurfaceDescription.Occlusion:                  surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;

        float mask = _EyeMask.Sample(s_point_clamp, fragInputs.texCoord0.xy);
        surfaceData.mask = mask;
        float2 texcoord = fragInputs.texCoord0.xy;
        float3 positionOS = mul(GetWorldToObjectMatrix(), fragInputs.positionRWS + _WorldSpaceCameraPos);
        float height = - positionOS.z + 0.5 > 0.10087 ? 0.0 : - positionOS.z + 0.5 ;

        if (_EyeRefraction)
        {
            if(true)
            {
                float n = 1.0/1.4;
                //float w = 1.4 * dot( fragInputs.tangentToWorld[2], V );
                //float k = sqrt( 1.0 + ( w - n ) * ( w + n ) );
                //float3 refractedW = ( w - k ) * fragInputs.tangentToWorld[2] - n * V;
                float3 refractedW = refract(-V, fragInputs.tangentToWorld[2], n);
                float cosAlpha = dot(GetWorldToObjectMatrix()[2].xyz, -refractedW);
                float dist = height  / cosAlpha;
                float3 offsetW = dist * refractedW;
                float2 offsetL = (mul(offsetW, (float3x2) GetWorldToObjectMatrix()));
                texcoord += (float2(mask, -mask) * offsetL);
            }
            else
            {
                float2 viewL = mul(V, (float3x2) GetWorldToObjectMatrix());
                float2 offset = height * viewL;
                offset.x = -offset.x;
                texcoord -= 0.1 * offset;
            }
        }


        surfaceData.baseColor = _EyeTexture.Sample(s_point_clamp, texcoord.xy);
        surfaceData.irisSmoothness = 0.99;
        surfaceData.scleraSmoothness = 0.99;
        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);

        // tangent-space normal
        float3 normalTS = float3(0.0f, 0.0f, 1.0f);
        $SurfaceDescription.Normal: normalTS = surfaceDescription.Normal;

        // Override, TODO this should use profile index to pickup the right texture
        normalTS = _EyeNormal.Sample(s_point_clamp, texcoord.xy);
 
        // compute world space normal
        GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

        bentNormalWS = surfaceData.normalWS;
        $BentNormal: GetNormalWS(fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants);

        surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];

        // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
        // If user provide bent normal then we process a better term
        surfaceData.specularOcclusion = 1.0;

#if defined(_SPECULAR_OCCLUSION_CUSTOM)
        // Just use the value passed through via the slot (not active otherwise)
#elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
        // If we have bent normal and ambient occlusion, process a specular occlusion
        surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
#elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
        surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
#else
        surfaceData.specularOcclusion = 1.0;
#endif

#ifdef DEBUG_DISPLAY
        if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
        {
            // TODO: need to update mip info
        }

        // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
        // as it can modify attribute use for static lighting
        ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
#endif
    }

    void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
    {
#ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
        uint3 fadeMaskSeed = asuint((int3)(V * _ScreenSize.xyx)); // Quantize V to _ScreenSize values
        LODDitheringTransition(fadeMaskSeed, unity_LODFade.x);
#endif

        float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);

        ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

        SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);

        float3 bentNormalWS;
        BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);

        // Builtin Data
        // For back lighting we use the oposite vertex normal 
        InitBuiltinData(posInput, 1.0, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

        $DepthOffset: builtinData.depthOffset = surfaceDescription.DepthOffset;

        PostInitBuiltinData(V, posInput, surfaceData, builtinData);
    }

    //-------------------------------------------------------------------------------------
    // Pass Includes
    //-------------------------------------------------------------------------------------
$splice(Includes)
    //-------------------------------------------------------------------------------------
    // End Pass Includes
    //-------------------------------------------------------------------------------------

    ENDHLSL
}
