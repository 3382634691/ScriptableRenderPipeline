Pass
{
    Name "$splice(PassName)"
    Tags { "LightMode" = "$splice(LightMode)" }

    // Hardcoded render states for a full-screen quad:
    ZWrite Off
    ZTest Always
    Blend Off
    Cull Off

    HLSLPROGRAM

    // We don't include BuiltinUtilities that provide SampleBakedGI because 
    float3 SampleBakedGI(float3 positionRWS, float3 normalWS, float2 uvStaticLightmap, float2 uvDynamicLightmap)
    {
        return float3(0.0, 0.0, 0.0);
    }

    #pragma target 4.5
    #pragma only_renderers d3d11 ps4 xboxone vulkan metal switch
    #pragma enable_d3d11_debug_symbols

    #pragma vertex Vert
    #pragma fragment Frag

    //-------------------------------------------------------------------------------------
    // Defines
    //-------------------------------------------------------------------------------------
    $splice(Defines)

    // this translates the new dependency tracker into the old preprocessor definitions for the existing HDRP shader code
    $AttributesMesh.normalOS:               #define ATTRIBUTES_NEED_NORMAL
    $AttributesMesh.tangentOS:              #define ATTRIBUTES_NEED_TANGENT
    $AttributesMesh.uv0:                    #define ATTRIBUTES_NEED_TEXCOORD0
    $AttributesMesh.uv1:                    #define ATTRIBUTES_NEED_TEXCOORD1
    $AttributesMesh.uv2:                    #define ATTRIBUTES_NEED_TEXCOORD2
    $AttributesMesh.uv3:                    #define ATTRIBUTES_NEED_TEXCOORD3
    $AttributesMesh.color:                  #define ATTRIBUTES_NEED_COLOR
    $VaryingsMeshToPS.positionRWS:          #define VARYINGS_NEED_POSITION_WS
    $VaryingsMeshToPS.normalWS:             #define VARYINGS_NEED_TANGENT_TO_WORLD
    $VaryingsMeshToPS.texCoord0:            #define VARYINGS_NEED_TEXCOORD0
    $VaryingsMeshToPS.texCoord1:            #define VARYINGS_NEED_TEXCOORD1
    $VaryingsMeshToPS.texCoord2:            #define VARYINGS_NEED_TEXCOORD2
    $VaryingsMeshToPS.texCoord3:            #define VARYINGS_NEED_TEXCOORD3
    $VaryingsMeshToPS.color:                #define VARYINGS_NEED_COLOR
    $VaryingsMeshToPS.cullFace:             #define VARYINGS_NEED_CULLFACE
    $features.modifyMesh:                   #define HAVE_MESH_MODIFICATION

    // Force transparent to access the scene depth/color
    #define _SURFACE_TYPE_TRANSPARENT       1

    //-------------------------------------------------------------------------------------
    // End Defines
    //-------------------------------------------------------------------------------------
    
    #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"

    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"

    #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
#ifdef DEBUG_DISPLAY
    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
#endif

    //-------------------------------------------------------------------------------------
    // Interpolator Packing And Struct Declarations
    //-------------------------------------------------------------------------------------
    $buildType(AttributesMesh)
    $buildType(VaryingsMeshToPS)
    $buildType(VaryingsMeshToDS)
    //-------------------------------------------------------------------------------------
    // End Interpolator Packing And Struct Declarations
    //-------------------------------------------------------------------------------------

    //-------------------------------------------------------------------------------------
    // Graph generated code
    //-------------------------------------------------------------------------------------
    $splice(Graph)
    //-------------------------------------------------------------------------------------
    // End graph generated code
    //-------------------------------------------------------------------------------------

$include("FullScreenSharedCode.template.hlsl")

    #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/VertMesh.hlsl"

    PackedVaryingsType Vert(AttributesMesh inputMesh, uint vertexID : SV_VERTEXID)
    {
        VaryingsType varyingsType;
        varyingsType.vmesh = VertMesh(inputMesh);

        // Patch datas for full screen quads
        varyingsType.vmesh.positionCS = GetFullScreenTriangleVertexPosition(vertexID);
        $VaryingsMeshToPS.positionRWS: varyingsType.vmesh.positionRWS = TransformObjectToWorld(varyingsType.vmesh.positionCS); // float3(0, 0, 0); // TODO
        $AttributesMesh.uv0: varyingsType.vmesh.texCoord0.xy = GetFullScreenTriangleTexCoord(vertexID);

        return PackVaryingsType(varyingsType);
    }

    void Frag(  PackedVaryingsToPS packedInput
                , out float4 outputColor : SV_Target
$ModifyDepth:   , out float outputDepth : SV_Depth
            )
    {
        UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
        FragInputs input = UnpackVaryingsMeshToFragInputs(packedInput.vmesh);

        // View direction:
        // float3 V = float3(1.0, 1.0, 1.0);
        float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

        SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(input, V);
        SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);

        outputColor = float4(surfaceDescription.Color, 1.0);
        $ModifyDepth: outputDepth = surfaceDescription.Depth;

        // outputColor = float4(V, 1);
    }

    ENDHLSL
}
